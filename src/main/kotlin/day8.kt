fun countAntinodes(map: List<String>): Int {
    val antennas = mutableMapOf<Char, MutableList<Pair<Int, Int>>>()
    val rows = map.size
    val cols = map[0].length

    // Parse the map to find antennas
    for (y in map.indices) {
        for (x in map[y].indices) {
            val char = map[y][x]
            if (char != '.') {
                antennas.computeIfAbsent(char) { mutableListOf() }.add(x to y)
            }
        }
    }

    // Set to track unique antinode positions
    val antinodes = mutableSetOf<Pair<Int, Int>>()

    // Calculate antinodes for each frequency
    for ((frequency, positions) in antennas) {
        // Compare every pair of antennas with the same frequency
        for (i in positions.indices) {
            for (j in positions.indices) {
                if (i == j) continue // Skip the same antenna

                val (x1, y1) = positions[i]
                val (x2, y2) = positions[j]

                // Calculate vector between the antennas
                val dx = x2 - x1
                val dy = y2 - y1

                // Check if one is twice as far as the other
                val midX1 = x1 - dx
                val midY1 = y1 - dy
                val midX2 = x2 + dx
                val midY2 = y2 + dy

                // Add valid antinodes within map bounds
                if (midX1 in 0 until cols && midY1 in 0 until rows) {
                    antinodes.add(midX1 to midY1)
                }
                if (midX2 in 0 until cols && midY2 in 0 until rows) {
                    antinodes.add(midX2 to midY2)
                }
            }
        }
    }

    // Return the number of unique antinode locations
    return antinodes.size
}

// Example usage
fun main() {
    val map = listOf(
        "..................................................",
        "................2.................................",
        "......6.........x.0..G............................",
        "..............x5......0..................S........",
        ".....0............................................",
        "..................................y..............e",
        "..........................G...............O.......",
        ".....................0........GO...............d..",
        ".........................8..........e.............",
        ".........6....................................e...",
        "......z6..5...N..x...................eY...........",
        "................6.........5..........Y.E..........",
        ".........X.....N....................E.a...S.....4.",
        "...........................N.2......d.............",
        "...s..................92.....a...................4",
        "............s....................GO........4......",
        "...........................................d.....S",
        ".....................X....N.......................",
        ".........A........................................",
        ".s.....................A....E.......a.........Y...",
        ".....g....s..................E.....Y..............",
        ".............o....................................",
        "...............................3...............O..",
        ".g.................F.3.y..........................",
        ".......F................y.....................d...",
        "..................................X...............",
        "..8....5............X..Z..........................",
        "..g.....8.....na..................................",
        "......................................3...........",
        ".............J.......x............S.Z.............",
        "..2J....h.A...............Z.......................",
        "......A.............................3.............",
        "............J.......n.............................",
        ".8......o....n...........Z........................",
        "..................o..............y................",
        "..F.........................D...............9H....",
        ".................................1.............9..",
        "..................................................",
        ".........h.....n......................f...........",
        ".h....................z..........j.........9......",
        ".......oF............................j............",
        "..........h......z...........7.....1.f............",
        "........................7.......1...H...j........f",
        "........................................f.........",
        "...........................7.......H..............",
        "................................H.................",
        ".............z...........D........................",
        "..............J....................Dj.............",
        "....................................D.............",
        "....................7.......1....................."
    )
    println(countAntinodes(map)) // Output: Number of unique antinode locations
}
