fun countAntinodesUpdated(map: List<String>): Int {
    val antennas = mutableMapOf<Char, MutableList<Pair<Int, Int>>>()
    val rows = map.size
    val cols = map[0].length

    // Parse the map to find antennas
    for (y in map.indices) {
        for (x in map[y].indices) {
            val char = map[y][x]
            if (char != '.') {
                antennas.computeIfAbsent(char) { mutableListOf() }.add(x to y)
            }
        }
    }

    val antinodes = mutableSetOf<Pair<Int, Int>>()

    // Process each frequency
    for ((frequency, positions) in antennas) {
        if (positions.size < 2) continue // Skip if fewer than 2 antennas

        // Include positions of all antennas of this frequency as antinodes
        antinodes.addAll(positions)

        // Check all pairs of antennas
        for (i in positions.indices) {
            for (j in i + 1 until positions.size) {
                val (x1, y1) = positions[i]
                val (x2, y2) = positions[j]

                val dx = x2 - x1
                val dy = y2 - y1

                // Find all points in line between these two antennas
                val gcd = gcd(dx, dy)
                val stepX = dx / gcd
                val stepY = dy / gcd

                var x = x1
                var y = y1
                while (x in 0 until cols && y in 0 until rows) {
                    antinodes.add(x to y)
                    x += stepX
                    y += stepY
                }

                x = x1
                y = y1
                while (x in 0 until cols && y in 0 until rows) {
                    antinodes.add(x to y)
                    x -= stepX
                    y -= stepY
                }
            }
        }
    }

    return antinodes.size
}

// Helper function to compute the greatest common divisor
fun gcd(a: Int, b: Int): Int {
    return if (b == 0) a else gcd(b, a % b)
}

// Example usage
fun main() {
    val map = listOf(
        "..................................................",
        "................2.................................",
        "......6.........x.0..G............................",
        "..............x5......0..................S........",
        ".....0............................................",
        "..................................y..............e",
        "..........................G...............O.......",
        ".....................0........GO...............d..",
        ".........................8..........e.............",
        ".........6....................................e...",
        "......z6..5...N..x...................eY...........",
        "................6.........5..........Y.E..........",
        ".........X.....N....................E.a...S.....4.",
        "...........................N.2......d.............",
        "...s..................92.....a...................4",
        "............s....................GO........4......",
        "...........................................d.....S",
        ".....................X....N.......................",
        ".........A........................................",
        ".s.....................A....E.......a.........Y...",
        ".....g....s..................E.....Y..............",
        ".............o....................................",
        "...............................3...............O..",
        ".g.................F.3.y..........................",
        ".......F................y.....................d...",
        "..................................X...............",
        "..8....5............X..Z..........................",
        "..g.....8.....na..................................",
        "......................................3...........",
        ".............J.......x............S.Z.............",
        "..2J....h.A...............Z.......................",
        "......A.............................3.............",
        "............J.......n.............................",
        ".8......o....n...........Z........................",
        "..................o..............y................",
        "..F.........................D...............9H....",
        ".................................1.............9..",
        "..................................................",
        ".........h.....n......................f...........",
        ".h....................z..........j.........9......",
        ".......oF............................j............",
        "..........h......z...........7.....1.f............",
        "........................7.......1...H...j........f",
        "........................................f.........",
        "...........................7.......H..............",
        "................................H.................",
        ".............z...........D........................",
        "..............J....................Dj.............",
        "....................................D.............",
        "....................7.......1....................."
    )
    println(countAntinodesUpdated(map))
}
